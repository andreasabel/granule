dotp' : FloatArray [] -> FloatArray [] -> Int [] -> Float -> (Float, (FloatArray [], FloatArray []))
dotp' arr1 arr2 [0] v = (v,(arr1,arr2));
dotp' [arr1] [arr2] [i] v =
  let [(e1,arr1')] = [(readFloatArray' arr1 i)];
      [(e2,arr2')] = [(readFloatArray' arr2 i)]
  in dotp' [arr1'] [arr2'] [i - 1] (v + (e1 * e2))

fill' : FloatArray -> Int [] -> FloatArray
fill' arr [0] = arr;
fill' arr [i] =
  let f = intToFloat i;
      arr' = writeFloatArray' arr i f
  in fill' arr' [i - 1]

cleanup' : (Float, (FloatArray [], FloatArray [])) -> Float
cleanup' (f, ([a1], [a2])) = f


dotp : ∗FloatArray -> ∗FloatArray -> Int [] -> Float -> (Float, (∗FloatArray, ∗FloatArray))
dotp arr1 arr2 [0] v = (v,(arr1,arr2));
dotp arr1 arr2 [i] v =
  let (e1,arr1') = (readFloatArray arr1 i);
      (e2,arr2') = (readFloatArray arr2 i)
  in dotp arr1' arr2' [i - 1] (v + (e1 * e2))

fill : ∗FloatArray -> Int [] -> ∗FloatArray
fill arr [0] = arr;
fill arr [i] =
  let f = intToFloat i;
      arr' = writeFloatArray arr i f
  in fill arr' [i - 1]

cleanup : (Float, (∗FloatArray, ∗FloatArray)) -> Float
cleanup (f, (a1, a2)) =
  let _ = deleteFloatArray a1;
      _ = deleteFloatArray a2
  in f

compute' : Int [] -> () <{Stdout}>
compute' [n] =
  let [arr1] = [fill' (newFloatArray' n) [n]];
      [arr2] = [fill' (newFloatArray' n) [n]];
      (val,([arr1'],[arr2'])) = dotp' [arr1] [arr2] [n] 0.0;
      val' = cleanup' (val,([arr1'],[arr2']))
  in toStdout (showFloat val')

compute : Int [] -> () <{Stdout}>
compute [n] =
  let arr1 = fill (newFloatArray n) [n];
      arr2 = fill (newFloatArray n) [n];
      val = cleanup (dotp arr1 arr2 [n] 0.0)
  in toStdout (showFloat val)

main : () <>
main =
  mkIOBenchMain (BenchGroup "copy" (Bench 10 "10" compute'
                 (Bench 100 "100" compute'
                  (Bench 1000 "1000" compute' Done)))
                 (BenchGroup "non-copy"
                   (Bench 10 "10" compute
                    (Bench 100 "100" compute
                     (Bench 1000 "1000" compute Done)))
                  Done))
