dotp' : ∗FloatArray -> ∗FloatArray -> Int [] -> Float -> (Float, (∗FloatArray, ∗FloatArray))
dotp' arr1 arr2 [0] v = (v,(arr1,arr2));
dotp' arr1 arr2 [i] v =
  let (e1,arr1') = (readFloatArray arr1 i);
      (e2,arr2') = (readFloatArray arr2 i)
  in dotp' arr1' arr2' [i - 1] (v + (e1 * e2))

fill' : ∗FloatArray -> Int [] -> ∗FloatArray
fill' arr [0] = arr;
fill' arr [i] =
  let f = intToFloat i;
      arr' = writeFloatArray arr i f
  in fill' arr' [i - 1]

cleanup : (Float, (∗FloatArray, ∗FloatArray)) -> Float
cleanup (f, (a1, a2)) =
  let _ = deleteFloatArray a1;
      _ = deleteFloatArray a2
  in f

main : () <{Stdout}>
main =
  let arr1 = fill' (newFloatArray 50000) [50000];
      arr2 = fill' (newFloatArray 50000) [50000];
      val = cleanup (dotp' arr1 arr2 [50000] 0.0)
  in toStdout (showFloat val)
