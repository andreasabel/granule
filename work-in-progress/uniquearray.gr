dotp' : *FloatArray -> *FloatArray -> Int [] -> Float -> (Float, (*FloatArray, *FloatArray))
dotp' arr1 arr2 [0] v = (v,(arr1,arr2));
dotp' arr1 arr2 [i] v =
  let (e1,arr1') = (readFloatArray arr1 i);
      (e2,arr2') = (readFloatArray arr2 i)
  in dotp' arr1' arr2' [i - 1] (v + (e1 * e2))

fill' : *FloatArray -> Int [] -> *FloatArray
fill' arr [0] = arr;
fill' arr [i] =
  let f = intToFloat i;
      arr' = writeFloatArray arr i f
  in fill' arr' [i - 1]

fst : forall {p, q : Type} . (p, (*q, *q)) -> p
fst (a, (b,c)) = let [u] = &b;
                     [v] = &c
                 in a

main : Float
main =
  let arr1 = fill' (newFloatArray 5) [5];
      arr2 = fill' (newFloatArray 5) [5];
      val = fst (dotp' arr1 arr2 [5] 0.0)
  in val
