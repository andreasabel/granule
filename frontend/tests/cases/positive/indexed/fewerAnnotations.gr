data Vec : Nat → Type → Type where
  Nil : ∀ {a : Type} . Vec 0 a;
  Cons : ∀ {a : Type, n : Nat} . a → Vec n a → Vec (n+1) a

vmap : ∀ {a : Type, b : Type, n : Nat} . (a → b) [n] → Vec n a → Vec n b
vmap [f] Nil = Nil;
vmap [f] (Cons x xs) = Cons (f x) (vmap [f] xs)

main : Vec 3 Int
-- Tests the approach for having fewer annotations on lambdas
main = vmap [λx → x + 1] (Cons 1 (Cons 2 (Cons 3 Nil)))
